//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Actions.sks`.
    static let actionsSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Actions", pathExtension: "sks")
    /// Resource file `GameScene.sks`.
    static let gameSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "GameScene", pathExtension: "sks")
    /// Resource file `Level1.txt`.
    static let level1Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "Level1", pathExtension: "txt")
    
    /// `bundle.url(forResource: "Actions", withExtension: "sks")`
    static func actionsSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.actionsSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GameScene", withExtension: "sks")`
    static func gameSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gameSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Level1", withExtension: "txt")`
    static func level1Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.level1Txt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 51 images.
  struct image {
    /// Image `armChair`.
    static let armChair = Rswift.ImageResource(bundle: R.hostingBundle, name: "armChair")
    /// Image `blackTile`.
    static let blackTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackTile")
    /// Image `block_05`.
    static let block_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "block_05")
    /// Image `chair`.
    static let chair = Rswift.ImageResource(bundle: R.hostingBundle, name: "chair")
    /// Image `door`.
    static let door = Rswift.ImageResource(bundle: R.hostingBundle, name: "door")
    /// Image `floor1`.
    static let floor1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "floor1")
    /// Image `largeTableCenterTile`.
    static let largeTableCenterTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "largeTableCenterTile")
    /// Image `largeTableLeftTile`.
    static let largeTableLeftTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "largeTableLeftTile")
    /// Image `largeTableRightTile`.
    static let largeTableRightTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "largeTableRightTile")
    /// Image `lawnGroundFirst`.
    static let lawnGroundFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "lawnGroundFirst")
    /// Image `lawnGroundFourth`.
    static let lawnGroundFourth = Rswift.ImageResource(bundle: R.hostingBundle, name: "lawnGroundFourth")
    /// Image `lawnGroundSecond`.
    static let lawnGroundSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "lawnGroundSecond")
    /// Image `lawnGroundThird`.
    static let lawnGroundThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "lawnGroundThird")
    /// Image `smallTable`.
    static let smallTable = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallTable")
    /// Image `sofaCenterTile`.
    static let sofaCenterTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "sofaCenterTile")
    /// Image `sofaLeftTile`.
    static let sofaLeftTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "sofaLeftTile")
    /// Image `sofaRightTile`.
    static let sofaRightTile = Rswift.ImageResource(bundle: R.hostingBundle, name: "sofaRightTile")
    /// Image `tileFloor1`.
    static let tileFloor1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tileFloor1")
    /// Image `wallBottomLeftCorner`.
    static let wallBottomLeftCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallBottomLeftCorner")
    /// Image `wallBottomLineAndTwoCorners`.
    static let wallBottomLineAndTwoCorners = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallBottomLineAndTwoCorners")
    /// Image `wallBottomRightCorner`.
    static let wallBottomRightCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallBottomRightCorner")
    /// Image `wallEndBottom`.
    static let wallEndBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallEndBottom")
    /// Image `wallEndLeft`.
    static let wallEndLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallEndLeft")
    /// Image `wallEndRight`.
    static let wallEndRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallEndRight")
    /// Image `wallEndTop`.
    static let wallEndTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallEndTop")
    /// Image `wallHorizantalCoupleLines`.
    static let wallHorizantalCoupleLines = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallHorizantalCoupleLines")
    /// Image `wallLeftLineAndTwoCorners`.
    static let wallLeftLineAndTwoCorners = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallLeftLineAndTwoCorners")
    /// Image `wallRightLineAndTwoCorners`.
    static let wallRightLineAndTwoCorners = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallRightLineAndTwoCorners")
    /// Image `wallSimpleBottomLeftCorner`.
    static let wallSimpleBottomLeftCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSimpleBottomLeftCorner")
    /// Image `wallSimpleRightButtomCorner`.
    static let wallSimpleRightButtomCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSimpleRightButtomCorner")
    /// Image `wallSimpleTopLeftCorner`.
    static let wallSimpleTopLeftCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSimpleTopLeftCorner")
    /// Image `wallSimpleTopRightCorner`.
    static let wallSimpleTopRightCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSimpleTopRightCorner")
    /// Image `wallSingleLineBottom`.
    static let wallSingleLineBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSingleLineBottom")
    /// Image `wallSingleLineLeft`.
    static let wallSingleLineLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSingleLineLeft")
    /// Image `wallSingleLineRight`.
    static let wallSingleLineRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSingleLineRight")
    /// Image `wallSingleLineTop`.
    static let wallSingleLineTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallSingleLineTop")
    /// Image `wallTopLeftCorner`.
    static let wallTopLeftCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallTopLeftCorner")
    /// Image `wallTopLineAndTwoCorners`.
    static let wallTopLineAndTwoCorners = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallTopLineAndTwoCorners")
    /// Image `wallTopRightCorner`.
    static let wallTopRightCorner = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallTopRightCorner")
    /// Image `wallVerticalCoupleLines`.
    static let wallVerticalCoupleLines = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallVerticalCoupleLines")
    /// Image `windowBottom`.
    static let windowBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "windowBottom")
    /// Image `windowLeft`.
    static let windowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "windowLeft")
    /// Image `windowRight`.
    static let windowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "windowRight")
    /// Image `windowTop`.
    static let windowTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "windowTop")
    /// Image `woodDoorBottom`.
    static let woodDoorBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorBottom")
    /// Image `woodDoorCenterHorizontaly`.
    static let woodDoorCenterHorizontaly = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorCenterHorizontaly")
    /// Image `woodDoorCenterVertical`.
    static let woodDoorCenterVertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorCenterVertical")
    /// Image `woodDoorLeft`.
    static let woodDoorLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorLeft")
    /// Image `woodDoorRight`.
    static let woodDoorRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorRight")
    /// Image `woodDoorTop`.
    static let woodDoorTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodDoorTop")
    /// Image `woodFloor1`.
    static let woodFloor1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "woodFloor1")
    
    /// `UIImage(named: "armChair", bundle: ..., traitCollection: ...)`
    static func armChair(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.armChair, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blackTile", bundle: ..., traitCollection: ...)`
    static func blackTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "block_05", bundle: ..., traitCollection: ...)`
    static func block_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.block_05, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chair", bundle: ..., traitCollection: ...)`
    static func chair(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chair, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "door", bundle: ..., traitCollection: ...)`
    static func door(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.door, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "floor1", bundle: ..., traitCollection: ...)`
    static func floor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.floor1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "largeTableCenterTile", bundle: ..., traitCollection: ...)`
    static func largeTableCenterTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.largeTableCenterTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "largeTableLeftTile", bundle: ..., traitCollection: ...)`
    static func largeTableLeftTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.largeTableLeftTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "largeTableRightTile", bundle: ..., traitCollection: ...)`
    static func largeTableRightTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.largeTableRightTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lawnGroundFirst", bundle: ..., traitCollection: ...)`
    static func lawnGroundFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lawnGroundFirst, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lawnGroundFourth", bundle: ..., traitCollection: ...)`
    static func lawnGroundFourth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lawnGroundFourth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lawnGroundSecond", bundle: ..., traitCollection: ...)`
    static func lawnGroundSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lawnGroundSecond, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lawnGroundThird", bundle: ..., traitCollection: ...)`
    static func lawnGroundThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lawnGroundThird, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "smallTable", bundle: ..., traitCollection: ...)`
    static func smallTable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallTable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sofaCenterTile", bundle: ..., traitCollection: ...)`
    static func sofaCenterTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sofaCenterTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sofaLeftTile", bundle: ..., traitCollection: ...)`
    static func sofaLeftTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sofaLeftTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sofaRightTile", bundle: ..., traitCollection: ...)`
    static func sofaRightTile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sofaRightTile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tileFloor1", bundle: ..., traitCollection: ...)`
    static func tileFloor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tileFloor1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallBottomLeftCorner", bundle: ..., traitCollection: ...)`
    static func wallBottomLeftCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallBottomLeftCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallBottomLineAndTwoCorners", bundle: ..., traitCollection: ...)`
    static func wallBottomLineAndTwoCorners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallBottomLineAndTwoCorners, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallBottomRightCorner", bundle: ..., traitCollection: ...)`
    static func wallBottomRightCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallBottomRightCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallEndBottom", bundle: ..., traitCollection: ...)`
    static func wallEndBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallEndBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallEndLeft", bundle: ..., traitCollection: ...)`
    static func wallEndLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallEndLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallEndRight", bundle: ..., traitCollection: ...)`
    static func wallEndRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallEndRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallEndTop", bundle: ..., traitCollection: ...)`
    static func wallEndTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallEndTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallHorizantalCoupleLines", bundle: ..., traitCollection: ...)`
    static func wallHorizantalCoupleLines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallHorizantalCoupleLines, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallLeftLineAndTwoCorners", bundle: ..., traitCollection: ...)`
    static func wallLeftLineAndTwoCorners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallLeftLineAndTwoCorners, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallRightLineAndTwoCorners", bundle: ..., traitCollection: ...)`
    static func wallRightLineAndTwoCorners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallRightLineAndTwoCorners, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSimpleBottomLeftCorner", bundle: ..., traitCollection: ...)`
    static func wallSimpleBottomLeftCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSimpleBottomLeftCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSimpleRightButtomCorner", bundle: ..., traitCollection: ...)`
    static func wallSimpleRightButtomCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSimpleRightButtomCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSimpleTopLeftCorner", bundle: ..., traitCollection: ...)`
    static func wallSimpleTopLeftCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSimpleTopLeftCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSimpleTopRightCorner", bundle: ..., traitCollection: ...)`
    static func wallSimpleTopRightCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSimpleTopRightCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSingleLineBottom", bundle: ..., traitCollection: ...)`
    static func wallSingleLineBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSingleLineBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSingleLineLeft", bundle: ..., traitCollection: ...)`
    static func wallSingleLineLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSingleLineLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSingleLineRight", bundle: ..., traitCollection: ...)`
    static func wallSingleLineRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSingleLineRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallSingleLineTop", bundle: ..., traitCollection: ...)`
    static func wallSingleLineTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallSingleLineTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallTopLeftCorner", bundle: ..., traitCollection: ...)`
    static func wallTopLeftCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallTopLeftCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallTopLineAndTwoCorners", bundle: ..., traitCollection: ...)`
    static func wallTopLineAndTwoCorners(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallTopLineAndTwoCorners, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallTopRightCorner", bundle: ..., traitCollection: ...)`
    static func wallTopRightCorner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallTopRightCorner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallVerticalCoupleLines", bundle: ..., traitCollection: ...)`
    static func wallVerticalCoupleLines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallVerticalCoupleLines, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "windowBottom", bundle: ..., traitCollection: ...)`
    static func windowBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windowBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "windowLeft", bundle: ..., traitCollection: ...)`
    static func windowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "windowRight", bundle: ..., traitCollection: ...)`
    static func windowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "windowTop", bundle: ..., traitCollection: ...)`
    static func windowTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windowTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorBottom", bundle: ..., traitCollection: ...)`
    static func woodDoorBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorCenterHorizontaly", bundle: ..., traitCollection: ...)`
    static func woodDoorCenterHorizontaly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorCenterHorizontaly, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorCenterVertical", bundle: ..., traitCollection: ...)`
    static func woodDoorCenterVertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorCenterVertical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorLeft", bundle: ..., traitCollection: ...)`
    static func woodDoorLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorRight", bundle: ..., traitCollection: ...)`
    static func woodDoorRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodDoorTop", bundle: ..., traitCollection: ...)`
    static func woodDoorTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodDoorTop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "woodFloor1", bundle: ..., traitCollection: ...)`
    static func woodFloor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woodFloor1, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// ru translation: Ошибка
      /// 
      /// Locales: ru, en
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Ошибка при загрузки сцены
      /// 
      /// Locales: ru, en
      static let errorLoadLevel = Rswift.StringResource(key: "ErrorLoadLevel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Ошибка при создании сцены
      /// 
      /// Locales: ru, en
      static let errorCreateScene = Rswift.StringResource(key: "ErrorCreateScene", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Уровень
      /// 
      /// Locales: ru, en
      static let level = Rswift.StringResource(key: "level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      
      /// ru translation: Ошибка
      /// 
      /// Locales: ru, en
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при загрузки сцены
      /// 
      /// Locales: ru, en
      static func errorLoadLevel(_: Void = ()) -> String {
        return NSLocalizedString("ErrorLoadLevel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при создании сцены
      /// 
      /// Locales: ru, en
      static func errorCreateScene(_: Void = ()) -> String {
        return NSLocalizedString("ErrorCreateScene", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Уровень
      /// 
      /// Locales: ru, en
      static func level(_: Void = ()) -> String {
        return NSLocalizedString("level", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
